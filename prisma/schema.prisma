datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI_DEV")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                 String              @id @default(auto()) @map("_id") @db.ObjectId
    slug               String              @unique
    refId              String              @unique @default(uuid())
    name               String?             @unique
    email              String?             @unique
    emailVerified      DateTime?
    password           String?
    image              String?
    age                Int?
    gender             String?
    authProviderId     String?
    activeStatus       String?             @default("inactive")
    role               String?             @default("admin")
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    accounts           Account[]
    health             Health[]
    eventRegistrations EventRegistration[] // Relation to track event registrations
    sessions           Session[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model Event {
    id                 String              @id @default(auto()) @map("_id") @db.ObjectId
    slug               String              @unique
    refId              String              @unique @default(uuid())
    title              String
    description        String
    courseLevel        String
    creditHour         Int
    certificate        String
    status             String?
    imageId            String?             @unique @db.ObjectId
    image              Image?              @relation(fields: [imageId], references: [id])
    eventRegistrations EventRegistration[] // Relation to track users joining this event
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
}

model Image {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    filename    String
    contentType String
    data        Bytes // Base64 string (or it can be binary data if preferred)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    event       Event?   @relation // Optional back-reference to Event (if needed)
}

model EventRegistration {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    eventId   String   @db.ObjectId
    status    String   @default("new") // Status like "new," "enrolled," or "completed"
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

    @@unique([userId, eventId]) // Ensures a user can register for an event only once
}

model Health {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    slug          String   @unique
    refId         String   @unique @default(uuid())
    heartRate     String
    breathingRate String
    courseLevel   String
    creditHour    Int
    certificate   String[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    User          User?    @relation(fields: [userId], references: [id])
    userId        String?  @db.ObjectId
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI_DEV")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                 String              @id @default(auto()) @map("_id") @db.ObjectId
    slug               String              @unique
    refId              String              @unique @default(uuid())
    name               String?             @unique
    email              String?             @unique
    emailVerified      DateTime?
    password           String?
    profileImageId     String?             @unique @db.ObjectId
    profileImage       ProfileImage?       @relation(fields: [profileImageId], references: [id])
    authProviderId     String?
    isActive           Boolean             @default(false) // Replaces activeStatus with a boolean
    role               Role                @default(user)
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    accounts           Account[]
    health             Health[]
    eventRegistrations EventRegistration[] // Relation to track event registrations
    sessions           Session[]
    ReportSubmission   ReportSubmission[]
    userDetail         UserDetail?         @relation
    RiskEvaluation     RiskEvaluation?
    announcements      Announcement[]
}

model UserDetail {
    id              String      @id @default(auto()) @map("_id") @db.ObjectId
    bio             String?     // A short description or bio for the user
    phoneNumber     String?
    gender          Gender?
    dateOfBirth     DateTime?
    age             Int?
    address         String?
    city            String?
    state           String?
    zipCode         String?
    country         String?
    university      String?
    height          String?
    weight          String?
    bloodType       String?
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    user            User        @relation(fields: [userId], references: [id]) // Back-reference to the User
    userId          String      @unique @db.ObjectId
}

model ProfileImage {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    filename    String
    contentType String
    data        Bytes // Base64 string (or it can be binary data if preferred)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User?    @relation // Optional back-reference to Event (if needed)
}

model Account {
    id                String   @id @default(auto()) @map("_id") @db.ObjectId
    userId            String   @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.String
    access_token      String?  @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.String
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    userRole  String
    expiresAt DateTime
    userSlug  String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model Event {
    id                 String              @id @default(auto()) @map("_id") @db.ObjectId
    slug               String              @unique
    refId              String              @unique @default(uuid())
    title              String
    description        String
    venue              String?
    date               DateTime?
    courseLevel        String
    creditHour         Int
    numberOfPeople     Int?
    type               String?
    status             String?
    eventImageId       String?             @unique @db.ObjectId
    eventImage         EventImage?         @relation(fields: [eventImageId], references: [id])
    eventCertificateId String?             @unique @db.ObjectId
    eventCertificate   EventCertificate?   @relation(fields: [eventCertificateId], references: [id])
    eventRegistrations EventRegistration[] // Links to registrations
    announcements       Announcement[]
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
}

model EventImage {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    filename    String
    contentType String
    data        Bytes
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    event       Event?   @relation
}

model EventCertificate {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    filename    String
    contentType String
    data        Bytes
    event       Event?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model EventRegistration {
    id                String   @id @default(auto()) @map("_id") @db.ObjectId
    userId            String   @db.ObjectId
    eventId           String   @db.ObjectId
    status            String   @default("new")
    participationType String   @default("participant") // "participant" or "helper"
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id])
    event             Event    @relation(fields: [eventId], references: [id])

    @@unique([userId, eventId]) // Ensures a user can register for an event only once
}

model ReportSubmission {
    id                  String      @id @default(auto()) @map("_id") @db.ObjectId
    status              String // "Submitted" or "Not Submitted"
    submittedAt         DateTime? // Timestamp of submission
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    reportFile          ReportFile? @relation()
    eventId             String
    eventRegistrationId String      @db.ObjectId
    User                User?       @relation(fields: [userId], references: [id])
    userId              String?     @db.ObjectId
}

model ReportFile {
    id                 String           @id @default(auto()) @map("_id") @db.ObjectId
    filename           String
    contentType        String
    data               Bytes
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
    reportSubmission   ReportSubmission @relation(fields: [reportSubmissionId], references: [id], onDelete: Cascade)
    reportSubmissionId String           @unique @db.ObjectId
}

model Health {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    slug          String   @unique
    refId         String   @unique @default(uuid())
    heartRate     String
    breathingRate String
    courseLevel   String
    creditHour    Int
    certificate   String[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    User          User?    @relation(fields: [userId], references: [id])
    userId        String?  @db.ObjectId
}

model RiskEvaluation {
    id                 String   @id @default(auto()) @map("_id") @db.ObjectId
    overallScore       Int?
    riskIndex          Int?
    neckRiskIndex      Int?
    shoulderRiskIndex  Int?
    lowerLimbRiskIndex Int?
    pelvicRiskIndex    Int?
    torsoRiskIndex     Int?
    mobility           Int?
    stability          Int?
    symmetry           Int?
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    User               User?    @relation(fields: [userId], references: [id])
    userId             String?  @unique @db.ObjectId
}

model Announcement{
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    slug        String   @unique
    title       String
    description String
    type        AnnouncementType @default(general)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id]) // User table
    userId      String   @db.ObjectId
    event       Event?    @relation(fields: [eventId], references: [id]) // Event table
    eventId     String?   @db.ObjectId
}

enum Role {
    admin
    user
    student
    university
    industry
}

enum Gender {
    male
    female
}

enum AnnouncementType {
    general
    event
}
